	/*
===============================================================================
Stored Procedure: Load Silver Layer (Bronze -> Silver)
===============================================================================
Script Purpose:
    This stored procedure performs the ETL (Extract, Transform, Load) process to 
    populate the 'silver' schema tables from the 'bronze' schema.
	Actions Performed:
		- Truncates Silver tables.
		- Inserts transformed and cleansed data from Bronze into Silver tables.
		
Parameters:
    None. 
	  This stored procedure does not accept any parameters or return any values.

Usage Example:
    EXEC Silver.load_silver;
===============================================================================
*/
		--CRM-Cust
		create or alter procedure silver.load_silver as
		begin
		declare @start_time datetime, @end_time datetime,@batch_start_time datetime, @batch_end_time datetime;
		begin try
		set @batch_start_time = GETDATE();
		print '=====================================================';
		print 'Loading Silver Layer'
		print '=====================================================';

		print '-----------------------------------------------------';
		print 'Loading CRM Layer'
		print '-----------------------------------------------------';
	--loading silver.crm_cust_info
	set @start_time = GETDATE()
		print'>> Truncating table :silver.crm_cust_info';
		truncate table silver.crm_cust_info;
		print'>> Inserting data Into : silver.crm_cust_info';
		insert into silver.crm_cust_info(
		cst_id,
		cst_key,
		cst_firstname,
		cst_lastname,
		cst_marital_status,
		cst_gndr,
		cst_create_date
		)
		select 
		cst_id,
		cst_key,
		trim(cst_firstname) as cst_firstname,
		TRIM(cst_lastname) as cst_lastname,
		case when upper(trim(cst_marital_status)) ='S' then 'Single'
			 when upper(trim(cst_marital_status)) = 'M' then 'Married'
			 else 'n/a'
		end cst_marital_status, -- Normalize marital status to redable format
		case when upper(trim(cst_gndr)) ='F' then 'Female'
			 when upper(trim(cst_gndr)) = 'M' then 'Male'
			 else 'n/a'
		end cst_gndr, -- Normalize Gender to redable format
		cst_create_date
		from (
		select *,
		ROW_NUMBER() over(partition by cst_id order by cst_create_date desc)as flag_last
		from bronze.crm_cust_info
		where cst_id is not null
		)t where flag_last = 1; -- select the most recent record per customer
		set @end_time = GETDATE();
			print'>>Loading Duration: ' +cast(datediff(second, @start_time, @end_time)as nvarchar)+ 'second';
			print'------------------------------------';


		-- CRM-Product
	--Loading  silver.crm_prd_info;
	set @start_time = GETDATE();
		print'>> Truncating table :silver.crm_prd_info';
		truncate table silver.crm_prd_info;
		print'>> Inserting data Into : silver.crm_prd_info';
		Insert into silver.crm_prd_info (
		prd_id, 
		cat_id,
		prd_key, 
		prd_nm,
		prd_cost, 
		prd_line, 
		prd_start_dt, 
		prd_end_dt 
		)

		select 
		prd_id,
		replace(SUBSTRING(prd_key,1,5),'-', '_') as cat_id, --Extract Category ID
		SUBSTRING(prd_key, 7, len(prd_key)) AS prd_key, -- Extract Product ID
		prd_nm,
		isnull(prd_cost,0) as prd_cost,
		case UPPER(TRIM(prd_line))
			 when 'M' then 'Mountain'
			 when 'R' then 'Road'
			 when 'S' then 'Other Sales'
			 when 'T' then 'Touring'
			 else 'n/a'
		end as prd_line, -- Map Product line codes to descriptive values
		cast(prd_start_dt AS date) as prd_start_dt,
		cast(lead(prd_start_dt) over (partition by prd_key order by prd_start_dt)-1 AS date)
		as prd_end_dt -- Calculate end date as one day before the next start date
		from bronze.crm_prd_info;
		set @end_time = GETDATE();
			print'>>Loading Duration: ' +cast(datediff(second, @start_time, @end_time)as nvarchar)+ 'second';
			print'------------------------------------';

		--CRM-Sales
	--Loading silver.crm_sales_details
	set @start_time = GETDATE();
		print'>> Truncating table :silver.crm_sales_details';
		truncate table silver.crm_sales_details;
		print'>> Inserting data Into : silver.crm_sales_details';
		insert into silver.crm_sales_details (
		sls_ord_num, 
		sls_prd_key, 
		sls_cust_id, 
		sls_order_dt, 
		sls_ship_dt, 
		sls_due_dt, 
		sls_sales,
		sls_quantity, 
		sls_price) 
		select
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		case when sls_order_dt = 0 or LEN(sls_order_dt) !=8 then null
			 else CAST(CAST(sls_order_dt as varchar)AS date)
		end as sls_order_dt,
		case when sls_ship_dt = 0 or LEN(sls_ship_dt) !=8 then null
			 else CAST(CAST(sls_ship_dt as varchar)AS date)
		end as sls_ship_dt,
		case when sls_due_dt = 0 or LEN(sls_due_dt) !=8 then null
			 else CAST(CAST(sls_due_dt as varchar)AS date)
		end as sls_due_dt,
		case when sls_sales IS null or sls_sales <=0 OR sls_sales != sls_quantity * ABS(sls_price) then sls_quantity * ABS(sls_price)
			 else sls_sales
		end as sls_sales,
		sls_quantity,
		case when sls_price is null or sls_price <= 0 then sls_sales / nullif(sls_quantity, 0)
			 else sls_price
		end as sls_price
		from bronze.crm_sales_details;
		set @end_time = GETDATE();
			print'>>Loading Duration: ' +cast(datediff(second, @start_time, @end_time)as nvarchar)+ 'second';
			print'------------------------------------';


		--ERP-Cust

	--loading silver.erp_cust_az12
		set @start_time = GETDATE();
		print'>> Truncating table :silver.erp_cust_az12';
		truncate table silver.erp_cust_az12;
		print'>> Inserting data Into : silver.erp_cust_az12';
		insert into silver.erp_cust_az12(cid, bdate, gen)
		select 
		case when cid like 'NAS%' then SUBSTRING(cid, 4, LEN(cid))
			  else cid
		end as cid,
		case when bdate > GETDATE () then null
			 else bdate
		end as bdate,
		case when upper(trim(gen)) in ('F', 'Female') then 'Female'
			 when upper(trim(gen)) in ('M', 'Male') then 'Male'
			 else'n/a'
			 end as gen
		from bronze.erp_cust_az12
		set @end_time = GETDATE();
			print'>>Loading Duration: ' +cast(datediff(second, @start_time, @end_time)as nvarchar)+ 'second';
			print'------------------------------------';


		--ERP-LOC
	--loading silver.erp_loc_a101 
	set @start_time = GETDATE()
		print'>> Truncating table :silver.erp_loc_a101';
		truncate table silver.erp_loc_a101;
		print'>> Inserting data Into : silver.erp_loc_a101';
		insert into silver.erp_loc_a101(cid, cntry)
		select
		replace(cid, '-','') cid,
		case when TRIM(cntry) = 'DE' then 'Germany'
			 when TRIM(cntry) in ('US', 'USA') then 'United States'
			 when TRIM(cntry) = '' or cntry IS null then 'n/a'
			 else TRIM(cntry)
			 end as cntry -- Normalize and handle missing or blank country codes
		from bronze.erp_loc_a101
	   set @end_time = GETDATE();
			print'>>Loading Duration: ' +cast(datediff(second, @start_time, @end_time)as nvarchar)+ 'second';
			print'------------------------------------';



		--ERP-CAT
	--loading silver.erp_px_cat_g1v2
		set @start_time = GETDATE()
		print'>> Truncating table :silver.erp_px_cat_g1v2';
		truncate table silver.erp_px_cat_g1v2
		print'>> Inserting data Into : silver.erp_px_cat_g1v2';
		insert into silver.erp_px_cat_g1v2(id,cat, subcat, maintenance)
		select
		id,
		cat,
		subcat,
		maintenance
		from bronze.erp_px_cat_g1v2
	set @end_time = GETDATE();
			print'>>Loading Duration: ' +cast(datediff(second, @start_time, @end_time)as nvarchar)+ 'second';
			print'------------------------------------';
	 set @batch_end_time =  GETDATE();
			print'==========================================='
			print'Loading silver Layer is Completed';
			print'  -Total Load Duration: ' + CAST(datediff(second, @batch_start_time, @batch_end_time) as nvarchar) + 'seconds';
			print'==========================================='
	end try
			begin catch
			print'==========================================='
			print'ERROR OCCURED DURING LOADING BRONZE LAYER '
			print'Error_Message' + Error_message();
			print'Error_Message' + CAST(Error_Number()as nvarchar);
			print'Error_Message' + CAST(Error_State()as nvarchar);
			print'==========================================='
	end catch

	end
exec silver.load_silver
